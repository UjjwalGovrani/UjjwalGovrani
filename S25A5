import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class MyCallable implements Callable{
	int num;
	MyCallable(int num){
		this.num = num;
	}
	public Object call() {
		System.out.println(Thread.currentThread().getName()+" is finding sum of first "+num+" numbers");
				int sum =0;
		for(int i=1;i<=num;i++) {
			sum = sum+i;
		}
		return sum;
	}
	}
	class S25A5 {
		public static void main(String args[]) {
			MyCallable[] jobs = {
					new MyCallable(100),
					new MyCallable(200),
					new MyCallable(300),	
					new MyCallable(400),	
					new MyCallable(500),
					new MyCallable(600)
			};
			ExecutorService service = Executors.newFixedThreadPool(2);
			for(MyCallable job:jobs) {
				Future f = service.submit(job);
				try {
					System.out.println(f.get());
				} catch (InterruptedException | ExecutionException e) {
					e.printStackTrace();
				}
			}
			service.shutdown();
		}
}
